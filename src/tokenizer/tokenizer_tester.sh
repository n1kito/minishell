#!/bin/bash

# Usage: ./tokenizer_tester
# To add more tests, update test variables below

################################################################################
##                             USEFUL VARIABLES                               ##
################################################################################

EXECUTABLE="tokenizer"
EXECUTABLE_PATH="."

TEST_COUNT=0
TEST_PASSED=0

## COLORS
################################################################################

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

## TITLE
################################################################################

TITLE="
üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî•

üî•                                 MINI(s)HELL                                üî•

üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî• üî•
                                \e[2m(tester by nikito)\e[22m
"

################################################################################
##                                   TESTS                                    ##
################################################################################

# Tests are double arrays.
# First element of each array is the test ran, second element is expected output.
#
#TEST[0]="abc"
#RESULT[0]="[abc]"

################################################################################
##                                  HEADER                                    ##
################################################################################

# CHECK IF PROGRAM EXISTS, RUN MAKE IF IT DOES NOT
#if ! command -v ${PROGRAM_PATH}/${PROGRAM} >/dev/null;
#then
#  printf "push_swap not found in parent folder.\nCompiling push_swap...
#fi

## DISPLAY TITLE
clear -x # clears screen, equals to CTRL + L in Terminal
#printf "${TITLE}"
echo
echo "  ‚ñà‚ñà‚ñà‚ñÑ ‚ñÑ‚ñà‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñà‚ñÑ    ‚ñà  ‚ñà‚ñà‚ñì  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñë ‚ñà‚ñà ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñì     ‚ñà‚ñà‚ñì    ";
echo " ‚ñì‚ñà‚ñà‚ñí‚ñÄ‚ñà‚ñÄ ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñí ‚ñà‚ñà ‚ñÄ‚ñà   ‚ñà ‚ñì‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà    ‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñÄ ‚ñì‚ñà‚ñà‚ñí    ‚ñì‚ñà‚ñà‚ñí    ";
echo " ‚ñì‚ñà‚ñà    ‚ñì‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà  ‚ñÄ‚ñà ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí‚ñë ‚ñì‚ñà‚ñà‚ñÑ   ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñà   ‚ñí‚ñà‚ñà‚ñë    ‚ñí‚ñà‚ñà‚ñë    ";
echo " ‚ñí‚ñà‚ñà    ‚ñí‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñë‚ñì‚ñà‚ñà‚ñí  ‚ñê‚ñå‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñë  ‚ñí   ‚ñà‚ñà‚ñí‚ñë‚ñì‚ñà ‚ñë‚ñà‚ñà ‚ñí‚ñì‚ñà  ‚ñÑ ‚ñí‚ñà‚ñà‚ñë    ‚ñí‚ñà‚ñà‚ñë    ";
echo " ‚ñí‚ñà‚ñà‚ñí   ‚ñë‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñë   ‚ñì‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñë‚ñì‚ñà‚ñí‚ñë‚ñà‚ñà‚ñì‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí";
echo " ‚ñë ‚ñí‚ñë   ‚ñë  ‚ñë‚ñë‚ñì  ‚ñë ‚ñí‚ñë   ‚ñí ‚ñí ‚ñë‚ñì  ‚ñí ‚ñí‚ñì‚ñí ‚ñí ‚ñë ‚ñí ‚ñë‚ñë‚ñí‚ñë‚ñí‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñë ‚ñí‚ñë‚ñì  ‚ñë‚ñë ‚ñí‚ñë‚ñì  ‚ñë";
echo " ‚ñë  ‚ñë      ‚ñë ‚ñí ‚ñë‚ñë ‚ñë‚ñë   ‚ñë ‚ñí‚ñë ‚ñí ‚ñë‚ñë ‚ñë‚ñí  ‚ñë ‚ñë ‚ñí ‚ñë‚ñí‚ñë ‚ñë ‚ñë ‚ñë  ‚ñë‚ñë ‚ñë ‚ñí  ‚ñë‚ñë ‚ñë ‚ñí  ‚ñë";
echo " ‚ñë      ‚ñë    ‚ñí ‚ñë   ‚ñë   ‚ñë ‚ñë  ‚ñí ‚ñë‚ñë  ‚ñë  ‚ñë   ‚ñë  ‚ñë‚ñë ‚ñë   ‚ñë     ‚ñë ‚ñë     ‚ñë ‚ñë   ";
echo "        ‚ñë    ‚ñë           ‚ñë  ‚ñë        ‚ñë   ‚ñë  ‚ñë  ‚ñë   ‚ñë  ‚ñë    ‚ñë  ‚ñë    ‚ñë  ‚ñë";
printf "                         \e[2m(tester by nikito)\e[22m"

echo
echo
printf "üåà Running ${YELLOW}make${NC} on Tokenizer...\n"
make

#printf "
#******************
#* Starting tests *
#******************
#"

echo
echo "    ‚îå‚î¨‚îê‚îå‚îÄ‚îê‚î¨‚îå‚îÄ‚îå‚îÄ‚îê‚îå‚îê‚îå‚î¨‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚î¨‚îÄ‚îê   ";
echo " **  ‚îÇ ‚îÇ ‚îÇ‚îú‚î¥‚îê‚îú‚î§ ‚îÇ‚îÇ‚îÇ‚îÇ‚îå‚îÄ‚îò‚îú‚î§ ‚îú‚î¨‚îò **";
echo "     ‚î¥ ‚îî‚îÄ‚îò‚î¥ ‚î¥‚îî‚îÄ‚îò‚îò‚îî‚îò‚î¥‚îî‚îÄ‚îò‚îî‚îÄ‚îò‚î¥‚îî‚îÄ   ";

################################################################################
##                                   TESTING                                  ##
################################################################################

printf "\n\e[4mWord tokens\e[24m\n"

OUTPUT=$(${EXECUTABLE_PATH}/${EXECUTABLE} "abc")
EXPECTED_OUTPUT="[abc]"
if [ "$OUTPUT" = "$EXPECTED_OUTPUT" ]; then
  printf "${GREEN}OK${NC} "
 else
  printf "${RED}KO${NC} (Test returned <%s>)" "$OUTPUT"
fi

OUTPUT=$(${EXECUTABLE_PATH}/${EXECUTABLE} "abc >>> |> <<<sqf vdd ")
EXPECTED_OUTPUT="[abc|>>|>|||>|<<|<|sqf|vdd]"
if [ "$OUTPUT" = "$EXPECTED_OUTPUT" ]; then
   printf "${GREEN}OK${NC} "
 else
   printf "${RED}KO${NC} (${RED}Expected${NC} %s ${RED}returned${NC} %s)\n" "$EXPECTED_OUTPUT" "$OUTPUT"
fi

OUTPUT=$(${EXECUTABLE_PATH}/${EXECUTABLE} "<<< a b c def ||>>> > ")
EXPECTED_OUTPUT="[<<|<|a|b|c|def|||||>>|>|>]"
if [ "$OUTPUT" = "$EXPECTED_OUTPUT" ]; then
   printf "${GREEN}OK${NC} "
 else
   printf "${RED}KO${NC} (${RED}Expected${NC} %s ${RED}returned${NC} %s)\n" "$EXPECTED_OUTPUT" "$OUTPUT"
fi

echo
printf "\n\e[4mOperator tokens\e[24m\n"
echo No tests yet

printf "\n\e[4mQuoted tokens\e[24m\n"
OUTPUT=$(${EXECUTABLE_PATH}/${EXECUTABLE} "abc \"coucou\" abc")
EXPECTED_OUTPUT="[abc|coucou|abc]"
if [ "$OUTPUT" = "$EXPECTED_OUTPUT" ]; then
   printf "${GREEN}OK${NC} "
 else
   printf "${RED}KO${NC} (${RED}Expected${NC} %s ${RED}returned${NC} %s)\n" "$EXPECTED_OUTPUT" "$OUTPUT"
fi

OUTPUT=$(${EXECUTABLE_PATH}/${EXECUTABLE} "abc 'coucou>>||||||||\"\"pouet'abc")
EXPECTED_OUTPUT="[abc|coucou>>||||||||\"\"pouet|abc]"
if [ "$OUTPUT" = "$EXPECTED_OUTPUT" ]; then
   printf "${GREEN}OK${NC} "
 else
   printf "${RED}KO${NC} (${RED}Expected${NC} %s ${RED}returned${NC} %s)\n" "$EXPECTED_OUTPUT" "$OUTPUT"
fi

echo
echo

#
#TEST_RESULT=$(${EXECUTABLE_PATH}/${EXECUTABLE} "${TEST[$i]}")
#  echo ${TEST_RESULT}

#for i in "${!TEST[@]}"
#do
#  TEST_RESULT=${${EXECUTABLE_PATH}/${EXECUTABLE} "${TEST[$i]}"}
#  echo ${TEST_RESULT}
#    if [ "$TEST_RESULT" == "$RESULT[$i]" ]
#    then
#          printf "${GREEN}OK${NC} " # IF VARIABLE IS EMPTY, MEANS PROGRAM DID NOT RETURN ANYTHING AND IS OK
#         (( TEST_PASSED++ ))
#         (( TEST_COUNT++ ))
#    else
##          printf "${RED}Error${NC} (Test %s <%s> returned <%s>) " "$j" "${TEST_RETURNS_OPERATIONS[$j]}" "${RESULT}" # IF PROGRAM RETURNED SOMETHING, TEST FAILS AND SHOWS WHAT WAS TESTED
#          printf KO
#         (( TEST_COUNT++ ))
#    fi
#done
